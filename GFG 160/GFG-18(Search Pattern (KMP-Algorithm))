
<Problem><=>

https://www.geeksforgeeks.org/batch/gfg-160-problems/track/string-gfg-160/problem/search-pattern0205

<Ans><=>

class Solution {

    ArrayList<Integer> search(String pat, String txt) {
        // your code here
         int n = txt.length();
        int m = pat.length();
        ArrayList<Integer> ans = new ArrayList<>();

        int[] lps = new int[m];
        lps(pat, lps);

        int i = 0, j = 0;
        while (i < n){
            if (txt.charAt(i) == pat.charAt(j)){
                j++;
                i++;
                if (j == m){
                    ans.add(i-j);
                    j = lps[j-1];
                }
            }
            else if (j == 0) i++;
            else j = lps[j-1];
        }
        return ans;
    }
    // Longest prefix and suffix
    static void lps (String s, int[]ans){
        int n = s.length();
        int i = 0, j = 1;
        while (j < n){
            if (s.charAt(i) == s.charAt(j)) ans[j++] = ++i;
            else if (i == 0) ans[j++] = 0;
            else i = ans[i-1];
        }
    }
}
